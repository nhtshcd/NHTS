package com.sourcetrace.eses.entity;
// Generated 23 Jun, 2020 5:09:17 PM by Hibernate Tools 5.0.6.Final

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Where;

import com.sourcetrace.eses.util.StringUtil;

/**
 * DynamicMenuConfig generated by hbm2java
 */
@Entity
@Table(name = "dynamic_menu_config")
public class DynamicFeildMenuConfig implements java.io.Serializable {

	public static enum EntityTypes {
		NA, FARMER, FARM, GROUP, CERTIFICATION, TRAINING, FARM_CROPS,RFA_CERT
	}
	private Long id;
	private String code;
	private String name;
	private String iconClass;
	private String txnType;
	private String entity;
	private String order;
	private Integer isSeason;
	private Integer isSingleRecord;
	private String agentType;
	private String mTxnType;
	private String beforeAdd;
	private String afterAdd;
	private Long revisionNo;
	private Long isActivity;
	private Long isScore;
	private String branch;
	private String method;
	private String parameter;
	private Set<DynamicMenuSectionMap> dynamicSectionConfigs = new HashSet<DynamicMenuSectionMap>(0);
	private Set<DynamicMenuFieldMap> dynamicFieldConfigs = new HashSet<DynamicMenuFieldMap>(0);
	
	private Set<LanguagePreferences> languagePreferences;
	
	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "CODE")
	public String getCode() {
		return this.code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Column(name = "NAME")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "ICON_CLASS")
	public String getIconClass() {
		return this.iconClass;
	}

	public void setIconClass(String iconClass) {
		this.iconClass = iconClass;
	}

	@Column(name = "TXN_TYPE")
	public String getTxnType() {
		return this.txnType;
	}

	public void setTxnType(String txnType) {
		this.txnType = txnType;
	}

	@Column(name = "ENTITY")
	public String getEntity() {
		return this.entity;
	}

	public void setEntity(String entity) {
		this.entity = entity;
	}

	@Column(name = "ORDERZ", length = 3)
	public String getOrder() {
		return this.order;
	}

	public void setOrder(String orderz) {
		this.order = orderz;
	}

	@Column(name = "IS_SEASON", length = 20)
	public Integer getIsSeason() {
		return this.isSeason;
	}

	public void setIsSeason(Integer isSeason) {
		this.isSeason = isSeason;
	}

	@Column(name = "IS_SINGLE_RECORD", length = 20)
	public Integer getIsSingleRecord() {
		return this.isSingleRecord;
	}

	public void setIsSingleRecord(Integer isSingleRecord) {
		this.isSingleRecord = isSingleRecord;
	}

	@Column(name = "AGENT_TYPE", length = 10)
	public String getAgentType() {
		return this.agentType;
	}

	public void setAgentType(String agentType) {
		this.agentType = agentType;
	}

	
	
	@Column(name = "M_TXN_TYPEZ")
	public String getmTxnType() {
		return mTxnType;
	}

	public void setmTxnType(String mTxnType) {
		this.mTxnType = mTxnType;
	}

	
	@Column(name = "BEFORE_ADD", length = 100)
	public String getBeforeAdd() {
		return this.beforeAdd;
	}

	public void setBeforeAdd(String beforeAdd) {
		this.beforeAdd = beforeAdd;
	}

	@Column(name = "AFTER_ADD", length = 100)
	public String getAfterAdd() {
		return this.afterAdd;
	}

	public void setAfterAdd(String afterAdd) {
		this.afterAdd = afterAdd;
	}

	@Column(name = "REVISION_NO")
	public Long getRevisionNo() {
		return this.revisionNo;
	}

	public void setRevisionNo(Long revisionNo) {
		this.revisionNo = revisionNo;
	}

	@Column(name = "IS_ACTIVITY")
	public Long getIsActivity() {
		return this.isActivity;
	}

	public void setIsActivity(Long isActivity) {
		this.isActivity = isActivity;
	}

	@Column(name = "is_score")
	public Long getIsScore() {
		return this.isScore;
	}

	public void setIsScore(Long isScore) {
		this.isScore = isScore;
	}

	@Column(name = "BRANCH")
	public String getBranch() {
		return this.branch;
	}

	public void setBranch(String branch) {
		this.branch = branch;
	}

	@Column(name = "METHOD", length = 45)
	public String getMethod() {
		return this.method;
	}

	public void setMethod(String method) {
		this.method = method;
	}

	@Column(name = "PARAMETER", length = 250)
	public String getParameter() {
		return this.parameter;
	}

	public void setParameter(String parameter) {
		this.parameter = parameter;
	}

	@OneToMany( mappedBy = "menu")
	public Set<DynamicMenuSectionMap> getDynamicSectionConfigs() {
		return this.dynamicSectionConfigs;
	}

	public void setDynamicSectionConfigs(Set<DynamicMenuSectionMap> dynamicMenuSectionMaps) {
		this.dynamicSectionConfigs = dynamicMenuSectionMaps;
	}

	@OneToMany( mappedBy = "menu")
	public Set<DynamicMenuFieldMap> getDynamicFieldConfigs() {
		return dynamicFieldConfigs;
	}

	public void setDynamicFieldConfigs(Set<DynamicMenuFieldMap> dynamicMenuFieldMap) {
		this.dynamicFieldConfigs = dynamicMenuFieldMap;
	}
	
	@OneToMany(cascade=CascadeType.ALL)
	@JoinColumn(name="code",referencedColumnName="CODE")
	@Where(clause = "LTYPE=3")
	public Set<LanguagePreferences> getLanguagePreferences() {
		return languagePreferences;
	}

	public void setLanguagePreferences(Set<LanguagePreferences> languagePreferences) {
		this.languagePreferences = languagePreferences;
	}
	
public String getLangName(String loggedInUserLanguage) {
		
		if (this.getLanguagePreferences() != null && this.getLanguagePreferences().size() > 0 && !StringUtil.isEmpty(loggedInUserLanguage)) {
			List<LanguagePreferences> lpList =   this.getLanguagePreferences().stream().filter(u -> u.getLang().equals(loggedInUserLanguage)).collect(Collectors.toList());
			return (lpList != null && !lpList.isEmpty()) ? lpList.get(0).getName() : this.name;
		}else{
			return this.name;
		}
	}


}
